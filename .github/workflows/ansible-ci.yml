name: Ansible CI/CD Pipeline

permissions:
  contents: read
  security-events: write
  pull-requests: write
  actions: read

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - 'playbooks/**'
      - 'roles/**'
      - 'environments/**'
      - '.github/workflows/ansible-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'playbooks/**'
      - 'roles/**'
      - 'environments/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: false
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod

env:
  ANSIBLE_VERSION: "11.5.0"  # This installs ansible with ansible-core 2.18.x
  PYTHON_VERSION: "3.11"
  ANSIBLE_LINT_VERSION: "24.10.0"  # Updated to latest compatible version
  YAMLLINT_VERSION: "1.35.1"
  MOLECULE_VERSION: "24.10.0"  # Updated to latest version

jobs:
  # Job 1: YAML Linting
  yaml-lint:
    name: YAML Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-yamllint-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-yamllint-

      - name: Install yamllint
        run: |
          pip install --upgrade pip
          pip install yamllint==${{ env.YAMLLINT_VERSION }}

      - name: Create yamllint config
        run: |
          cat > .yamllint << 'EOF'
          ---
          extends: default

          rules:
            line-length:
              max: 160
              level: warning
            comments:
              min-spaces-from-content: 1
            comments-indentation: disable
            braces:
              max-spaces-inside: 1
            brackets:
              max-spaces-inside: 1
            indentation:
              spaces: 2
              indent-sequences: consistent
            truthy:
              allowed-values: ['true', 'false', 'yes', 'no', 'True', 'False']

          ignore: |
            .github/
            .cache/
            molecule/
          EOF

      - name: Run yamllint
        run: |
          yamllint --version
          yamllint -c .yamllint . || true  # Don't fail on warnings
          yamllint -c .yamllint --strict . 2>&1 | tee yamllint-report.txt
        continue-on-error: true

      - name: Upload yamllint report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: yamllint-report
          path: yamllint-report.txt

  # Job 2: Ansible Linting
  ansible-lint:
    name: Ansible Linting
    runs-on: ubuntu-latest
    needs: yaml-lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-ansible-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-ansible-

      - name: Install Ansible and ansible-lint
        run: |
          pip install --upgrade pip
          pip install ansible==${{ env.ANSIBLE_VERSION }}
          pip install ansible-lint==${{ env.ANSIBLE_LINT_VERSION }}
          pip install jmespath  # For JSON queries in Ansible

      - name: Create ansible-lint config
        run: |
          cat > .ansible-lint << 'EOF'
          ---
          profile: production

          exclude_paths:
            - .cache/
            - .github/
            - molecule/

          enable_list:
            - fqcn-builtins
            - no-log-password
            - no-same-owner
            - name[prefix]

          skip_list:
            - yaml[line-length]  # Handled by yamllint
            - name[missing]  # Allow some tasks without names

          warn_list:
            - command-instead-of-shell
            - deprecated-command-syntax
            - experimental

          kinds:
            - tasks: "**/tasks/*.yml"
            - vars: "**/vars/*.yml"
            - defaults: "**/defaults/*.yml"
            - meta: "**/meta/*.yml"
            - handlers: "**/handlers/*.yml"
          EOF

      - name: Run ansible-lint
        run: |
          ansible-lint --version
          ansible-lint --force-color --parseable-severity 2>&1 | tee ansible-lint-report.txt
        continue-on-error: true

      - name: Check for critical errors
        run: |
          if grep -E "^\[ERROR\]|^\[CRITICAL\]" ansible-lint-report.txt; then
            echo "Critical errors found in ansible-lint"
            exit 1
          fi

      - name: Upload ansible-lint report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ansible-lint-report
          path: ansible-lint-report.txt

  # Job 3: Ansible Syntax Check
  ansible-syntax:
    name: Ansible Syntax Check
    runs-on: ubuntu-latest
    needs: yaml-lint
    strategy:
      matrix:
        environment: [dev, test, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Ansible and dependencies
        run: |
          pip install --upgrade pip
          pip install ansible==${{ env.ANSIBLE_VERSION }}
          pip install kubernetes  # For k8s module
          pip install openshift   # For OpenShift modules
          pip install boto3       # For AWS modules
          pip install requests    # For URI module
          ansible-galaxy collection install kubernetes.core -p ./collections
          ansible-galaxy collection install amazon.aws -p ./collections
          ansible-galaxy collection install community.general -p ./collections

      - name: Check playbook syntax
        run: |
          for playbook in playbooks/*.yml; do
            if [ -f "$playbook" ]; then
              echo "Checking syntax for: $playbook"
              ansible-playbook --syntax-check "$playbook" \
                -e target_environment=${{ matrix.environment }} \
                -e aws_profile=test-profile \
                -e env=${{ matrix.environment }} || exit 1
            fi
          done

      - name: Check role syntax
        run: |
          for role in roles/*/; do
            if [ -f "${role}tasks/main.yml" ]; then
              echo "Checking role: $role"
              role_name=$(basename $role)
              cat > /tmp/test-playbook.yml << EOF
          ---
          - hosts: localhost
            gather_facts: no
            vars:
              target_environment: ${{ matrix.environment }}
              aws_profile: test-profile
            roles:
              - ${role_name}
          EOF
              ansible-playbook --syntax-check /tmp/test-playbook.yml \
                -e target_environment=${{ matrix.environment }} \
                -e aws_profile=test-profile || exit 1
            fi
          done

  # Job 4: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: yaml-lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy security scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'  # Don't fail the build on vulnerabilities
        continue-on-error: true

      - name: Run Trivy for SARIF (if permissions available)
        uses: aquasecurity/trivy-action@0.28.0
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        continue-on-error: true
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --baseline .secrets.baseline || true
          detect-secrets audit .secrets.baseline || true

  # Job 5: Variable Validation
  variable-validation:
    name: Variable Validation
    runs-on: ubuntu-latest
    needs: yaml-lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pyyaml jinja2 jsonschema

      - name: Create variable validator script
        run: |
          cat > validate_vars.py << 'EOF'
          #!/usr/bin/env python3
          import yaml
          import sys
          import os
          from pathlib import Path
          import json

          def check_undefined_vars(file_path):
              """Check for undefined variables in Ansible files"""
              errors = []
              with open(file_path, 'r') as f:
                  content = f.read()
                  # Look for {{ variable }} patterns
                  import re
                  vars_used = re.findall(r'\{\{\s*([a-zA-Z_][a-zA-Z0-9_]*)\s*(?:\||\})', content)

                  # Check if variables are defined
                  for var in vars_used:
                      if var not in ['item', 'ansible_facts', 'hostvars', 'groups', 'inventory_hostname']:
                          # Check if var is defined in defaults or vars
                          if not check_var_defined(var, file_path):
                              errors.append(f"Undefined variable '{var}' in {file_path}")
              return errors

          def check_var_defined(var_name, file_path):
              """Check if variable is defined in role defaults or vars"""
              role_path = Path(file_path).parent.parent
              defaults_file = role_path / 'defaults' / 'main.yml'
              vars_file = role_path / 'vars' / 'main.yml'

              for var_file in [defaults_file, vars_file]:
                  if var_file.exists():
                      with open(var_file, 'r') as f:
                          try:
                              data = yaml.safe_load(f)
                              if data and var_name in data:
                                  return True
                          except:
                              pass
              return False

          def check_reserved_names(file_path):
              """Check for Ansible reserved variable names"""
              reserved = ['environment', 'action', 'role', 'inventory', 'play', 'task']
              errors = []
              with open(file_path, 'r') as f:
                  try:
                      data = yaml.safe_load(f)
                      if isinstance(data, dict):
                          for key in data.keys():
                              if key in reserved:
                                  errors.append(f"Reserved variable name '{key}' used in {file_path}")
                  except:
                      pass
              return errors

          def validate_types(file_path):
              """Validate variable types"""
              errors = []
              with open(file_path, 'r') as f:
                  content = f.read()
                  # Check for common type mismatches
                  if 'environment: []' in content or 'environment: ""' in content:
                      if '{{ environment }}' in content:
                          errors.append(f"Type mismatch: 'environment' used as both list and string in {file_path}")
              return errors

          def main():
              all_errors = []

              # Check all YAML files
              for yaml_file in Path('.').rglob('*.yml'):
                  if '.github' not in str(yaml_file):
                      all_errors.extend(check_undefined_vars(yaml_file))
                      all_errors.extend(check_reserved_names(yaml_file))
                      all_errors.extend(validate_types(yaml_file))

              if all_errors:
                  print("Variable validation errors found:")
                  for error in all_errors:
                      print(f"  - {error}")
                  sys.exit(1)
              else:
                  print("✓ All variables validated successfully")

          if __name__ == "__main__":
              main()
          EOF
          chmod +x validate_vars.py

      - name: Run variable validation
        run: python validate_vars.py
        continue-on-error: true

  # Job 6: Molecule Testing (Optional)
  molecule-test:
    name: Molecule Testing
    runs-on: ubuntu-latest
    needs: [ansible-lint, ansible-syntax]
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        role:
          - cf-harness
          - cf-db
          - cf-deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Molecule
        run: |
          pip install --upgrade pip
          pip install ansible==${{ env.ANSIBLE_VERSION }}
          pip install molecule==${{ env.MOLECULE_VERSION }}
          pip install molecule-plugins[docker]

      - name: Create Molecule scenario
        run: |
          cd roles/${{ matrix.role }}
          molecule init scenario default --driver-name docker || true

      - name: Run Molecule tests
        run: |
          cd roles/${{ matrix.role }}
          molecule test || true
        continue-on-error: true

  # Job 7: Documentation Check
  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for README files
        run: |
          missing_docs=()
          for role in roles/*/; do
            if [ ! -f "${role}README.md" ]; then
              missing_docs+=("$role")
            fi
          done

          if [ ${#missing_docs[@]} -gt 0 ]; then
            echo "Missing README.md in roles:"
            printf '%s\n' "${missing_docs[@]}"
            exit 1
          fi

      - name: Check for meta/main.yml
        run: |
          missing_meta=()
          for role in roles/*/; do
            if [ ! -f "${role}meta/main.yml" ]; then
              missing_meta+=("$role")
            fi
          done

          if [ ${#missing_meta[@]} -gt 0 ]; then
            echo "Missing meta/main.yml in roles:"
            printf '%s\n' "${missing_meta[@]}"
            echo "Warning: Roles without meta files"
          fi

  # Job 8: Summary Report
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [yaml-lint, ansible-lint, ansible-syntax, security-scan, variable-validation, documentation-check]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: reports

      - name: Generate summary report
        run: |
          echo "## Ansible CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check job statuses
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| YAML Lint | ${{ needs.yaml-lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Ansible Lint | ${{ needs.ansible-lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Syntax Check | ${{ needs.ansible-syntax.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Variable Validation | ${{ needs.variable-validation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation | ${{ needs.documentation-check.result }} |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Reports" >> $GITHUB_STEP_SUMMARY

          # Add report summaries if they exist
          if [ -f reports/yamllint-report/yamllint-report.txt ]; then
            echo "#### YAML Lint Issues" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -20 reports/yamllint-report/yamllint-report.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f reports/ansible-lint-report/ansible-lint-report.txt ]; then
            echo "#### Ansible Lint Issues" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -20 reports/ansible-lint-report/ansible-lint-report.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `
            ## 🤖 Ansible CI Results

            | Check | Status |
            |-------|--------|
            | YAML Lint | ${{ needs.yaml-lint.result }} |
            | Ansible Lint | ${{ needs.ansible-lint.result }} |
            | Syntax Check | ${{ needs.ansible-syntax.result }} |
            | Security | ${{ needs.security-scan.result }} |
            | Variables | ${{ needs.variable-validation.result }} |
            | Docs | ${{ needs.documentation-check.result }} |

            View full reports in the workflow artifacts.
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
