apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    app.kubernetes.io/owner: consultingFirm
    app.kubernetes.io/version: "1.0"
    deployment.kubernetes.io/revision: "1"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"app.kubernetes.io/owner":"consultingFirm","app.kubernetes.io/version":"1.0"},"labels":{"app.kubernetes.io/component":"apiComponent","app.kubernetes.io/instance":"apiservice","app.kubernetes.io/name":"ecr-credentials-sync","app.kubernetes.io/version":"1.0"},"name":"ecr-credentials-sync","namespace":"cf-dev"},"spec":{"progressDeadlineSeconds":600,"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"app":"ecr-credentials-sync"}},"strategy":{"type":"RollingUpdate"},"template":{"metadata":{"annotations":{"app.kubernetes.io/owner":"consultingFirm","app.kubernetes.io/version":"1.0"},"labels":{"app":"ecr-credentials-sync","app.kubernetes.io/component":"apiComponent","app.kubernetes.io/instance":"apiservice","app.kubernetes.io/name":"ecr-credentials-sync","app.kubernetes.io/version":"1.0"}},"spec":{"containers":[{"command":["/bin/sh","-ce","# Create writable AWS config directory\nmkdir -p /tmp/.aws\nexport AWS_CONFIG_FILE=/tmp/.aws/config\nexport AWS_SHARED_CREDENTIALS_FILE=/tmp/.aws/credentials\n\n\nwhile true; do\n  CURRENT_TIME=$(date \"+%Y-%m-%d %H:%M:%S\")\n  # ECR Initialization\n  aws ecr get-login-password --region ${REGION} \u003e /token/ecr-token\n  cd /tmp \u0026\u0026 /usr/bin/curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz\n  python3 -c \"import tarfile; import os; tar=tarfile.open('/tmp/openshift-client-linux.tar.gz', 'r:gz'); tar.extractall('/tmp'); tar.close(); os.system('ls -la /tmp/oc')\"                                                                                                                                 \n  # Command for create-secret\n  /tmp/oc create secret docker-registry regcred \\\n     --dry-run=client \\\n     --docker-server=\"818140567777.dkr.ecr.us-east-1.amazonaws.com\" \\\n     --docker-username=AWS \\\n     --docker-password=\"$(cat /token/ecr-token)\" \\\n     -o yaml | /tmp/oc apply -f -\n\n  echo \"Successfully Secret Created at [$CURRENT_TIME]\"\n\n  # Additional commands for create-secret if needed\n\n  sleep 6h\ndone"],"env":[{"name":"REGION","value":"us-east-1"},{"name":"HOME","value":"/tmp"},{"name":"AWS_CONFIG_FILE","value":"/tmp/.aws/config"},{"name":"AWS_SHARED_CREDENTIALS_FILE","value":"/tmp/.aws/credentials"}],"image":"amazon/aws-cli:latest","imagePullPolicy":"Always","name":"ecr-sync","resources":{"limits":{"cpu":"1","memory":"2G"},"requests":{"cpu":"500m","memory":"1G"}},"securityContext":{"allowPrivilegeEscalation":false,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/token","name":"token"}]}],"dnsPolicy":"ClusterFirst","restartPolicy":"Always","securityContext":{},"serviceAccount":"ecr-sa","serviceAccountName":"ecr-sa","terminationGracePeriodSeconds":30,"volumes":[{"emptyDir":{"medium":"Memory"},"name":"token"}]}}}}
  labels:
    app.kubernetes.io/component: apiComponent
    app.kubernetes.io/instance: apiservice
    app.kubernetes.io/name: ecr-credentials-sync
    app.kubernetes.io/version: "1.0"
  name: ecr-credentials-sync
  namespace: cf-app
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: ecr-credentials-sync
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        app.kubernetes.io/owner: consultingFirm
        app.kubernetes.io/version: "1.0"
      labels:
        app: ecr-credentials-sync
        app.kubernetes.io/component: apiComponent
        app.kubernetes.io/instance: apiservice
        app.kubernetes.io/name: ecr-credentials-sync
        app.kubernetes.io/version: "1.0"
    spec:
      containers:
      - command:
        - /bin/sh
        - -ce
        - "# Create writable AWS config directory\nmkdir -p /tmp/.aws\nexport AWS_CONFIG_FILE=/tmp/.aws/config\nexport
          AWS_SHARED_CREDENTIALS_FILE=/tmp/.aws/credentials\n\n\nwhile true; do\n
          \ CURRENT_TIME=$(date \"+%Y-%m-%d %H:%M:%S\")\n  # ECR Initialization\n
          \ aws ecr get-login-password --region ${REGION} > /token/ecr-token\n  cd
          /tmp && /usr/bin/curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz\n
          \ python3 -c \"import tarfile; import os; tar=tarfile.open('/tmp/openshift-client-linux.tar.gz',
          'r:gz'); tar.extractall('/tmp'); tar.close(); os.system('ls -la /tmp/oc')\"
          \                                                                                                                                \n
          \ # Command for create-secret\n  /tmp/oc create secret docker-registry regcred
          \\\n     --dry-run=client \\\n     --docker-server=\"818140567777.dkr.ecr.us-east-1.amazonaws.com\"
          \\\n     --docker-username=AWS \\\n     --docker-password=\"$(cat /token/ecr-token)\"
          \\\n     -o yaml | /tmp/oc apply -f -\n\n  echo \"Successfully Secret Created
          at [$CURRENT_TIME]\"\n\n  # Additional commands for create-secret if needed\n\n
          \ sleep 6h\ndone"
        env:
        - name: REGION
          value: us-east-1
        - name: HOME
          value: /tmp
        - name: AWS_CONFIG_FILE
          value: /tmp/.aws/config
        - name: AWS_SHARED_CREDENTIALS_FILE
          value: /tmp/.aws/credentials
        image: amazon/aws-cli:latest
        imagePullPolicy: Always
        name: ecr-sync
        resources:
          limits:
            cpu: "1"
            memory: 2G
          requests:
            cpu: 500m
            memory: 1G
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /token
          name: token
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: ecr-sa
      serviceAccountName: ecr-sa
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir:
          medium: Memory
        name: token
  conditions:
  - lastTransitionTime: "2025-07-27T06:35:30Z"
    lastUpdateTime: "2025-07-27T06:35:31Z"
    message: ReplicaSet "ecr-credentials-sync-8547b7898c" has successfully progressed.
    reason: NewReplicaSetAvailable
    type: Progressing
  - lastTransitionTime: "2025-08-13T23:49:38Z"
    lastUpdateTime: "2025-08-13T23:49:38Z"
    message: Deployment does not have minimum availability.
    reason: MinimumReplicasUnavailable
    type: Available
  - lastTransitionTime: "2025-08-26T01:26:11Z"
    lastUpdateTime: "2025-08-26T01:26:11Z"
    message: 'pods "ecr-credentials-sync-8547b7898c-" is forbidden: error looking
      up service account cf-dev/ecr-sa: serviceaccount "ecr-sa" not found'
    reason: FailedCreate
    type: ReplicaFailure
  observedGeneration: 1
  unavailableReplicas: 1
