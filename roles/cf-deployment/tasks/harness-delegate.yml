---
# Harness Delegate Installation Task
# Deploys Harness delegate to enable CI/CD pipeline execution

- name: Harness Delegate - Check if delegate namespace exists
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Namespace
    name: "{{ harness_delegate_namespace }}"
  register: delegate_namespace_check
  tags:
    - cf-deployment
    - harness-delegate
    - harness

- name: Harness Delegate - Check if delegate is already deployed
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: "{{ harness_delegate_name }}"
    namespace: "{{ harness_delegate_namespace }}"
  register: delegate_deployment_check
  when: delegate_namespace_check.resources | length > 0
  tags:
    - cf-deployment
    - harness-delegate
    - harness

- name: Harness Delegate - Check delegate connectivity
  uri:
    url: "{{ harness_manager_endpoint }}/api/agents/{{ harness_account_id }}/{{ harness_delegate_name }}/status"
    method: GET
    headers:
      x-api-key: "{{ harness_api_key }}"
    status_code: [200, 404]
  register: delegate_status
  when:
    - delegate_namespace_check.resources | length > 0
    - delegate_deployment_check.resources | length > 0
  ignore_errors: yes
  tags:
    - cf-deployment
    - harness-delegate
    - harness

- name: Harness Delegate - Display current status
  debug:
    msg:
      - "Delegate namespace exists: {{ delegate_namespace_check.resources | length > 0 }}"
      - "Delegate deployment exists: {{ delegate_deployment_check.resources | default([]) | length > 0 }}"
      - "Delegate connectivity: {{ delegate_status.status | default('Not checked') }}"
  tags:
    - cf-deployment
    - harness-delegate
    - harness

- name: Harness Delegate - Prompt for delegate token if not provided
  pause:
    prompt: |

      Harness Delegate Token Required!
      ================================
      Please provide the delegate token from Harness UI:
      1. Login to {{ harness_manager_endpoint }}
      2. Navigate to Project Settings > Delegates
      3. Click "New Delegate" > "Kubernetes"
      4. Copy the delegate token

      Enter delegate token
  register: delegate_token_input
  when:
    - harness_delegate_token is not defined or harness_delegate_token == ""
    - delegate_deployment_check.resources | default([]) | length == 0
  tags:
    - cf-deployment
    - harness-delegate
    - harness

- name: Harness Delegate - Set delegate token
  set_fact:
    harness_delegate_token: "{{ delegate_token_input.user_input | default(harness_delegate_token) }}"
  when: delegate_token_input.user_input is defined
  tags:
    - cf-deployment
    - harness-delegate
    - harness

- name: Harness Delegate - Create namespace
  kubernetes.core.k8s:
    name: "{{ harness_delegate_namespace }}"
    api_version: v1
    kind: Namespace
    state: present
  when: delegate_namespace_check.resources | length == 0
  tags:
    - cf-deployment
    - harness-delegate
    - harness

- name: Harness Delegate - Create service account
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: "{{ harness_delegate_sa_name }}"
        namespace: "{{ harness_delegate_namespace }}"
    state: present
  tags:
    - cf-deployment
    - harness-delegate
    - harness

- name: Harness Delegate - Create cluster role binding
  kubernetes.core.k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: "{{ harness_delegate_namespace }}-{{ harness_delegate_sa_name }}"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
        - kind: ServiceAccount
          name: "{{ harness_delegate_sa_name }}"
          namespace: "{{ harness_delegate_namespace }}"
    state: present
  tags:
    - cf-deployment
    - harness-delegate
    - harness

- name: Harness Delegate - Create delegate script ConfigMap (for fallback image)
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ harness_delegate_name }}-script"
        namespace: "{{ harness_delegate_namespace }}"
      data:
        delegate.sh: |
          #!/bin/sh
          echo "Harness Delegate Starting..."
          echo "Account ID: {{ harness_account_id }}"
          echo "Delegate Name: {{ harness_delegate_name }}"
          echo "Manager Endpoint: {{ harness_manager_endpoint }}"
          echo "WARNING: Using fallback image. This is not a real delegate."
          echo "To deploy real delegate, fix cluster network connectivity or registry."

          # Create a fake delegate log for readiness probe
          mkdir -p /opt/harness-delegate
          touch /opt/harness-delegate/delegate.log

          # Simple heartbeat loop
          while true; do
            echo "$(date): Delegate heartbeat (simulated)"
            sleep 30
          done
    state: present
  when: harness_delegate_use_fallback_image | default(false)
  tags:
    - cf-deployment
    - harness-delegate
    - harness

- name: Harness Delegate - Create delegate secret
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ harness_delegate_name }}-token"
        namespace: "{{ harness_delegate_namespace }}"
      type: Opaque
      data:
        DELEGATE_TOKEN: "{{ harness_delegate_token | b64encode }}"
    state: present
  when: harness_delegate_token is defined and harness_delegate_token != ""
  tags:
    - cf-deployment
    - harness-delegate
    - harness

- name: Harness Delegate - Deploy delegate
  kubernetes.core.k8s:
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: "{{ harness_delegate_name }}"
        namespace: "{{ harness_delegate_namespace }}"
        labels:
          app: harness-delegate
      spec:
        replicas: "{{ harness_delegate_replicas }}"
        selector:
          matchLabels:
            app: harness-delegate
        template:
          metadata:
            labels:
              app: harness-delegate
          spec:
            serviceAccountName: "{{ harness_delegate_sa_name }}"
            containers:
              - name: delegate
                image: "{{ harness_delegate_image }}"
                imagePullPolicy: IfNotPresent
                command: "{{ ['/bin/sh', '/scripts/delegate.sh'] if harness_delegate_use_fallback_image else omit }}"
                volumeMounts: "{{ [{'name': 'script', 'mountPath': '/scripts'}] if harness_delegate_use_fallback_image else omit }}"
                env:
                  - name: ACCOUNT_ID
                    value: "{{ harness_account_id }}"
                  - name: DELEGATE_TOKEN
                    valueFrom:
                      secretKeyRef:
                        name: "{{ harness_delegate_name }}-token"
                        key: DELEGATE_TOKEN
                  - name: MANAGER_HOST_AND_PORT
                    value: "{{ harness_manager_endpoint }}"
                  - name: DELEGATE_NAME
                    value: "{{ harness_delegate_name }}"
                  - name: DELEGATE_TYPE
                    value: "KUBERNETES"
                  - name: NEXT_GEN
                    value: "true"
                  - name: DELEGATE_TAGS
                    value: "{{ harness_delegate_tags }}"
                  - name: ORG_IDENTIFIER
                    value: "{{ harness_org_id }}"
                  - name: PROJECT_IDENTIFIER
                    value: "{{ harness_project_id }}"
                  - name: LOG_STREAMING_SERVICE_URL
                    value: "{{ harness_log_streaming_endpoint }}"
                  - name: DELEGATE_DESCRIPTION
                    value: "{{ harness_delegate_description }}"
                  - name: POLL_FOR_TASKS
                    value: "false"
                resources:
                  limits:
                    memory: "{{ harness_delegate_memory_limit }}"
                    cpu: "{{ harness_delegate_cpu_limit }}"
                  requests:
                    memory: "{{ harness_delegate_memory_request }}"
                    cpu: "{{ harness_delegate_cpu_request }}"
                readinessProbe:
                  exec:
                    command:
                      - test
                      - -s
                      - /opt/harness-delegate/delegate.log
                initialDelaySeconds: 20
                periodSeconds: 10
                livenessProbe:
                  exec:
                    command:
                      - bash
                      - -c
                      - >-
                        [[ -e /opt/harness-delegate/msg/data/watcher-data &&
                        $(($(date +%s000) - $(grep heartbeat /opt/harness-delegate/msg/data/watcher-data |
                        cut -d ":" -f 2 | cut -d "," -f 1))) -lt 300000 ]]
                  initialDelaySeconds: 240
                  periodSeconds: 10
                  failureThreshold: 3
            volumes: >-
              {{ [{'name': 'script', 'configMap':
              {'name': harness_delegate_name + '-script', 'defaultMode': 493}}]
              if harness_delegate_use_fallback_image else omit }}
    state: present
  when: harness_delegate_token is defined and harness_delegate_token != ""
  tags:
    - cf-deployment
    - harness-delegate
    - harness

- name: Harness Delegate - Wait for delegate to be ready
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: "{{ harness_delegate_name }}"
    namespace: "{{ harness_delegate_namespace }}"
    wait: true
    wait_condition:
      type: Progressing
      status: "True"
      reason: NewReplicaSetAvailable
    wait_timeout: 300
  when: harness_delegate_token is defined and harness_delegate_token != ""
  tags:
    - cf-deployment
    - harness-delegate
    - harness

- name: Harness Delegate - Verify delegate connectivity
  uri:
    url: "{{ harness_manager_endpoint }}/api/agents/{{ harness_account_id }}/{{ harness_delegate_name }}/heartbeat"
    method: GET
    headers:
      x-api-key: "{{ harness_api_key }}"
    status_code: [200, 404]
  register: delegate_heartbeat
  retries: 5
  delay: 10
  until: delegate_heartbeat.status == 200
  when: harness_delegate_token is defined and harness_delegate_token != ""
  ignore_errors: yes
  tags:
    - cf-deployment
    - harness-delegate
    - harness

- name: Harness Delegate - Installation summary
  debug:
    msg:
      - "Harness Delegate Installation Complete"
      - "=================================="
      - "Namespace: {{ harness_delegate_namespace }}"
      - "Delegate Name: {{ harness_delegate_name }}"
      - "Account ID: {{ harness_account_id }}"
      - "Organization: {{ harness_org_id }}"
      - "Project: {{ harness_project_id }}"
      - "Status: {{ 'Connected' if delegate_heartbeat.status | default(0) == 200 else 'Pending Connection' }}"
  tags:
    - cf-deployment
    - harness-delegate
    - harness
