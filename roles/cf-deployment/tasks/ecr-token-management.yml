---
# ECR Token Management - Complete Solution
# Creates RBAC, Service Account, and Deployment for continuous ECR token refresh

- name: ECR Token Management - Start
  debug:
    msg:
      - "Starting ECR token management setup"
      - "Namespace: {{ cf_namespace }}"
      - "ECR Registry: {{ ecr_token_config.ecr_registry }}"
      - "Service Account: {{ ecr_token_config.service_account_name }}"
      - "IAM Role: {{ ecr_token_config.iam_role_arn }}"
  tags:
    - cf-deployment
    - ecr-token-management
    - authentication

- name: Validate ECR token management configuration
  assert:
    that:
      - ecr_token_config.ecr_registry is defined
      - ecr_token_config.aws_region is defined
      - ecr_token_config.iam_role_arn is defined
      - ecr_token_config.service_account_name is defined
      - ecr_token_config.deployment_name is defined
      - ecr_token_config.secret_name is defined
      - ecr_token_config.base_image is defined
      - cf_namespace is defined
    fail_msg: "Missing required ECR token management configuration variables"
  tags:
    - cf-deployment
    - ecr-token-management
    - validation

- name: Create ECR secret management role
  kubernetes.core.k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: "{{ ecr_token_config.rbac_role_name }}"
        namespace: "{{ cf_namespace }}"
        labels:
          app.kubernetes.io/name: consultingfirm
          app.kubernetes.io/component: ecr-token-management
          app.kubernetes.io/managed-by: ansible
          environment: "{{ target_environment | default('dev') }}"
      rules:
        - apiGroups: [""]
          resources: ["secrets"]
          verbs: ["create", "update", "patch", "get", "list"]
        - apiGroups: [""]
          resources: ["events"]
          verbs: ["create"]
    state: present
    wait: true
    wait_timeout: 60
  tags:
    - cf-deployment
    - ecr-token-management
    - rbac

- name: Create ECR credentials sync service account
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: "{{ ecr_token_config.service_account_name }}"
        namespace: "{{ cf_namespace }}"
        annotations:
          eks.amazonaws.com/role-arn: "{{ ecr_token_config.iam_role_arn }}"
        labels:
          app.kubernetes.io/name: consultingfirm
          app.kubernetes.io/component: ecr-token-management
          app.kubernetes.io/managed-by: ansible
          environment: "{{ target_environment | default('dev') }}"
    state: present
    wait: true
    wait_timeout: 60
  tags:
    - cf-deployment
    - ecr-token-management
    - service-account

- name: Create ECR credentials sync role binding
  kubernetes.core.k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: "{{ ecr_token_config.rbac_binding_name }}"
        namespace: "{{ cf_namespace }}"
        labels:
          app.kubernetes.io/name: consultingfirm
          app.kubernetes.io/component: ecr-token-management
          app.kubernetes.io/managed-by: ansible
          environment: "{{ target_environment | default('dev') }}"
      subjects:
        - kind: ServiceAccount
          name: "{{ ecr_token_config.service_account_name }}"
          namespace: "{{ cf_namespace }}"
      roleRef:
        kind: Role
        name: "{{ ecr_token_config.rbac_role_name }}"
        apiGroup: rbac.authorization.k8s.io
    state: present
    wait: true
    wait_timeout: 60
  tags:
    - cf-deployment
    - ecr-token-management
    - rbac

- name: Create ECR token management deployment
  kubernetes.core.k8s:
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: "{{ ecr_token_config.deployment_name }}"
        namespace: "{{ cf_namespace }}"
        annotations:
          app.kubernetes.io/owner: consultingFirm
          app.kubernetes.io/version: "{{ ecr_token_config.app_version }}"
          fluxcd.io/automated: "true"
        labels:
          app.kubernetes.io/component: apiComponent
          app.kubernetes.io/instance: apiservice
          app.kubernetes.io/name: ecr-credentials-sync
          app.kubernetes.io/version: "{{ ecr_token_config.app_version }}"
          app.kubernetes.io/managed-by: ansible
          environment: "{{ target_environment | default('dev') }}"
      spec:
        progressDeadlineSeconds: 600
        replicas: 1
        revisionHistoryLimit: 10
        selector:
          matchLabels:
            app: ecr-credentials-sync
        strategy:
          type: RollingUpdate
        template:
          metadata:
            annotations:
              app.kubernetes.io/owner: consultingFirm
              app.kubernetes.io/version: "{{ ecr_token_config.app_version }}"
            labels:
              app: ecr-credentials-sync
              app.kubernetes.io/component: apiComponent
              app.kubernetes.io/instance: apiservice
              app.kubernetes.io/name: ecr-credentials-sync
              app.kubernetes.io/version: "{{ ecr_token_config.app_version }}"
          spec:
            serviceAccountName: "{{ ecr_token_config.service_account_name }}"
            serviceAccount: "{{ ecr_token_config.service_account_name }}"
            securityContext: {}
            containers:
              - name: ecr-sync
                image: "{{ ecr_token_config.base_image }}"
                imagePullPolicy: Always
                command:
                  - /bin/sh
                  - -ce
                  - |-
                    # Install kubectl
                    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                    chmod +x kubectl
                    mv kubectl /usr/local/bin/

                    while true; do
                      CURRENT_TIME=$(TZ="{{ ecr_token_config.timezone }}" date "+%Y-%m-%d %H:%M:%S")
                      # ECR Initialization
                      aws ecr get-login-password --region ${REGION} > /token/ecr-token

                      # Command for create-secret
                      kubectl create secret docker-registry {{ ecr_token_config.secret_name }} \
                        --dry-run=client \
                        --docker-server="{{ ecr_token_config.ecr_registry }}" \
                        --docker-username=AWS \
                        --docker-password="$(cat /token/ecr-token)" \
                        -o yaml | kubectl apply -f -

                      echo "Successfully Secret Created at [$CURRENT_TIME]"

                      # Additional commands for create-secret if needed

                      sleep {{ ecr_token_config.refresh_interval_hours }}h
                    done
                env:
                  - name: REGION
                    value: "{{ ecr_token_config.aws_region }}"
                resources:
                  limits:
                    cpu: "{{ ecr_token_config.resources.limits.cpu }}"
                    memory: "{{ ecr_token_config.resources.limits.memory }}"
                  requests:
                    cpu: "{{ ecr_token_config.resources.requests.cpu }}"
                    memory: "{{ ecr_token_config.resources.requests.memory }}"
                securityContext:
                  allowPrivilegeEscalation: false
                  runAsNonRoot: true
                  seccompProfile:
                    type: RuntimeDefault
                terminationMessagePath: /dev/termination-log
                terminationMessagePolicy: File
                volumeMounts:
                  - mountPath: /token
                    name: token
            volumes:
              - name: token
                emptyDir:
                  medium: Memory
            dnsPolicy: ClusterFirst
            restartPolicy: Always
            schedulerName: default-scheduler
            terminationGracePeriodSeconds: 30
    state: present
    wait: true
    wait_timeout: 180
  tags:
    - cf-deployment
    - ecr-token-management
    - deployment

- name: Wait for ECR token management deployment to be ready
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: "{{ ecr_token_config.deployment_name }}"
    namespace: "{{ cf_namespace }}"
    wait: true
    wait_condition:
      type: Available
      status: "True"
    wait_timeout: 300
  register: ecr_deployment_status
  tags:
    - cf-deployment
    - ecr-token-management
    - verification

- name: Wait for ECR secret creation
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ ecr_token_config.secret_name }}"
    namespace: "{{ cf_namespace }}"
    wait: true
    wait_timeout: 120
  register: ecr_secret_status
  tags:
    - cf-deployment
    - ecr-token-management
    - verification

- name: Verify ECR secret content
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ ecr_token_config.secret_name }}"
    namespace: "{{ cf_namespace }}"
  register: ecr_secret_info
  tags:
    - cf-deployment
    - ecr-token-management
    - verification

- name: Display ECR token management status
  debug:
    msg:
      - "ECR Token Management Deployment Status:"
      - "  Deployment: {{ ecr_token_config.deployment_name }}"
      - "  Namespace: {{ cf_namespace }}"
      - "  Service Account: {{ ecr_token_config.service_account_name }}"
      - "  RBAC Role: {{ ecr_token_config.rbac_role_name }}"
      - "  IAM Role: {{ ecr_token_config.iam_role_arn }}"
      - "  Secret Name: {{ ecr_token_config.secret_name }}"
      - "  Secret Status: {{ 'Created' if ecr_secret_info.resources else 'Not Found' }}"
      - "  Refresh Interval: {{ ecr_token_config.refresh_interval_hours }}h"
      - "  ECR Registry: {{ ecr_token_config.ecr_registry }}"
      - "  Deployment Status: {{ ecr_deployment_status.resources[0].status.conditions[-1].type if ecr_deployment_status.resources else 'Unknown' }}"
  tags:
    - cf-deployment
    - ecr-token-management
    - verification

- name: ECR Token Management - Completed
  debug:
    msg:
      - "ECR token management setup completed successfully"
      - "Automatic token refresh every {{ ecr_token_config.refresh_interval_hours }} hours"
      - "Secret '{{ ecr_token_config.secret_name }}' will be continuously updated"
      - "All CF deployments can now use imagePullSecrets with this secret"
  tags:
    - cf-deployment
    - ecr-token-management
    - complete
