# Task 2: Validate AWS service account configuration

- name: "Prompt for AWS profile name"
  pause:
    prompt: "Please enter your AWS profile name"
  register: aws_profile_input
  when: aws_profile is not defined
  tags: aws

- name: "Set AWS profile from input"
  set_fact:
    aws_profile: "{{ aws_profile_input.user_input if aws_profile_input.user_input is defined else aws_profile }}"
  tags: aws

- name: "Validate AWS profile is provided"
  fail:
    msg: "AWS profile name is required. Please provide aws_profile variable or enter it when prompted."
  when: aws_profile is not defined or aws_profile == ""
  tags: aws

- name: "Export AWS profile environment variable"
  shell: export AWS_PROFILE={{ aws_profile }}
  environment:
    AWS_PROFILE: "{{ aws_profile }}"
  tags: aws

- name: "Set AWS region for profile"
  shell: |
    export AWS_PROFILE={{ aws_profile }}
    aws configure set region {{ aws_region | default('us-east-1') }} --profile {{ aws_profile }}
  environment:
    AWS_PROFILE: "{{ aws_profile }}"
  tags: aws

- name: "Test AWS configuration"
  command: aws sts get-caller-identity
  register: aws_identity_check
  ignore_errors: yes
  environment:
    AWS_PROFILE: "{{ aws_profile }}"
  tags: aws

- name: "Parse AWS identity information"
  set_fact:
    aws_identity: "{{ aws_identity_check.stdout | from_json }}"
  when: aws_identity_check.rc == 0
  tags: aws

- name: "Display AWS identity information"
  debug:
    msg: |
      AWS Identity Information:
      - Account ID: {{ aws_identity.Account }}
      - User ARN: {{ aws_identity.Arn }}
      - User ID: {{ aws_identity.UserId }}
  when: aws_identity_check.rc == 0
  tags: aws

- name: "Fail if AWS credentials are not configured"
  fail:
    msg: |
      AWS credentials are not properly configured or invalid.
      Error: {{ aws_identity_check.stderr }}
      Please ensure you have provided valid AWS credentials with appropriate permissions.
  when: aws_identity_check.rc != 0
  tags: aws

- name: "Check if user has admin permissions"
  command: aws iam get-user
  register: aws_user_check
  ignore_errors: yes
  environment:
    AWS_PROFILE: "{{ aws_profile }}"
  tags: aws

- name: "Check attached user policies"
  command: aws iam list-attached-user-policies --user-name {{ aws_identity.Arn.split('/')[-1] }}
  register: aws_user_policies
  ignore_errors: yes
  when: aws_identity_check.rc == 0
  environment:
    AWS_PROFILE: "{{ aws_profile }}"
  tags: aws

- name: "Check user groups"
  command: aws iam list-groups-for-user --user-name {{ aws_identity.Arn.split('/')[-1] }}
  register: aws_user_groups
  ignore_errors: yes
  when: aws_identity_check.rc == 0
  environment:
    AWS_PROFILE: "{{ aws_profile }}"
  tags: aws

- name: "Validate admin permissions"
  block:
    - name: "Parse user policies"
      set_fact:
        user_policies: "{{ aws_user_policies.stdout | from_json }}"
      when: aws_user_policies.rc == 0

    - name: "Parse user groups"
      set_fact:
        user_groups: "{{ aws_user_groups.stdout | from_json }}"
      when: aws_user_groups.rc == 0

    - name: "Check for admin policy"
      set_fact:
        has_admin_policy: "{{ user_policies.AttachedPolicies | selectattr('PolicyName', 'equalto', 'AdministratorAccess') | list | length > 0 }}"
      when: user_policies is defined

    - name: "Check for admin group membership"
      set_fact:
        has_admin_group: "{{ user_groups.Groups | selectattr('GroupName', 'search', '[Aa]dmin') | list | length > 0 }}"
      when: user_groups is defined

    - name: "Check group policies for admin access"
      block:
        - name: "Get policies for each group"
          command: aws iam list-attached-group-policies --group-name {{ item.GroupName }}
          register: group_policies_result
          loop: "{{ user_groups.Groups }}"
          when: user_groups is defined
          environment:
            AWS_PROFILE: "{{ aws_profile }}"

        - name: "Check for AdministratorAccess in group policies"
          set_fact:
            has_admin_via_group: true
          when: 
            - group_policies_result is defined
            - group_policies_result.results is defined
            - item.stdout is defined
            - (item.stdout | from_json).AttachedPolicies | selectattr('PolicyName', 'equalto', 'AdministratorAccess') | list | length > 0
          loop: "{{ group_policies_result.results }}"
          loop_control:
            label: "{{ item.item.GroupName if item.item is defined else 'unknown' }}"
      when: user_groups is defined

    - name: "Verify admin access"
      fail:
        msg: |
          The provided service account does not have administrator access.
          Please provide a service account with AdministratorAccess policy or admin group membership.
          
          Current policies: {{ user_policies.AttachedPolicies | map(attribute='PolicyName') | list if user_policies is defined else 'Unable to retrieve' }}
          Current groups: {{ user_groups.Groups | map(attribute='GroupName') | list if user_groups is defined else 'Unable to retrieve' }}
      when: 
        - not (has_admin_policy | default(false))
        - not (has_admin_group | default(false))
        - not (has_admin_via_group | default(false))

  when: aws_identity_check.rc == 0

- name: "Warn about root account usage"
  debug:
    msg: |
      WARNING: It appears you may be using root account credentials.
      For security best practices, please use an IAM user with AdministratorAccess policy instead.
  when: aws_identity.Arn is defined and 'root' in aws_identity.Arn
  tags: aws
