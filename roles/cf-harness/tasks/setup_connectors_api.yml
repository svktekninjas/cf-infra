---
# Setup Harness connectors using REST API (AWS ECR, ROSA Cluster, GitHub)

- name: Set API base URL and headers
  set_fact:
    harness_api_base: "https://app.harness.io/gateway"
    harness_api_headers:
      x-api-key: "{{ harness_api_key }}"
      Content-Type: "application/json"

- name: Check if Deploy/harness directory exists
  stat:
    path: "/Users/swaroop/SIDKS/Deploy/harness"
  register: harness_dir

- name: Create temp directory for connector configs
  file:
    path: "/tmp/harness-connectors"
    state: directory
    mode: '0755'

# GitHub Connector
- name: Check if GitHub connector exists
  uri:
    url: "{{ harness_api_base }}/ng/api/connectors/{{ connector_github_id }}"
    method: GET
    headers: "{{ harness_api_headers }}"
    status_code: [200, 404]
    validate_certs: yes
  register: github_connector_check
  failed_when: false

- name: Create/Update GitHub connector
  uri:
    url: "{{ harness_api_base }}/ng/api/connectors{{ '' if github_connector_check.status == 404 else '/' + connector_github_id }}"
    method: "{{ 'POST' if github_connector_check.status == 404 else 'PUT' }}"
    headers: "{{ harness_api_headers }}"
    body_format: json
    body:
      connector:
        name: "{{ connector_github_name | default('github-connector') }}"
        identifier: "{{ connector_github_id }}"
        description: "GitHub connector for CF deployment"
        type: "Github"
        spec:
          url: "{{ github_url | default('https://github.com') }}"
          authentication:
            type: "Http"
            spec:
              type: "UsernameToken"
              spec:
                username: "{{ github_username }}"
                tokenRef: "{{ github_token_ref }}"
          apiAccess:
            type: "Token"
            spec:
              tokenRef: "{{ github_token_ref }}"
          executeOnDelegate: false
          type: "Repo"
      accountIdentifier: "{{ harness_account_id }}"
      orgIdentifier: "{{ harness_org_id }}"
      projectIdentifier: "{{ harness_project_id }}"
    status_code: [200, 201]
  register: github_connector_result

- name: Display GitHub connector result
  debug:
    msg: "GitHub connector {{ 'created' if github_connector_check.status == 404 else 'updated' }}: {{ connector_github_id }}"

# AWS ECR Connector with Cross-Account Access
- name: Check if AWS ECR connector exists
  uri:
    url: "{{ harness_api_base }}/ng/api/connectors/{{ connector_aws_ecr_id }}"
    method: GET
    headers: "{{ harness_api_headers }}"
    status_code: [200, 404]
    validate_certs: yes
  register: ecr_connector_check
  failed_when: false

- name: Create/Update AWS ECR connector
  uri:
    url: "{{ harness_api_base }}/ng/api/connectors{{ '' if ecr_connector_check.status == 404 else '/' + connector_aws_ecr_id }}"
    method: "{{ 'POST' if ecr_connector_check.status == 404 else 'PUT' }}"
    headers: "{{ harness_api_headers }}"
    body_format: json
    body:
      connector:
        name: "{{ connector_aws_ecr_name | default('aws-ecr-connector') }}"
        identifier: "{{ connector_aws_ecr_id }}"
        description: "AWS ECR connector for cross-account access"
        type: "Aws"
        spec:
          credential:
            type: "IamRole"
            spec:
              assumeRoleArn: "arn:aws:iam::{{ aws_account_id_target }}:role/{{ cross_account_role_name }}"
              externalId: "{{ cross_account_external_id }}"
          executeOnDelegate: true
          delegateSelectors:
            - "{{ harness_delegate_name }}"
      accountIdentifier: "{{ harness_account_id }}"
      orgIdentifier: "{{ harness_org_id }}"
      projectIdentifier: "{{ harness_project_id }}"
    status_code: [200, 201]
  register: ecr_connector_result

- name: Display AWS ECR connector result
  debug:
    msg: "AWS ECR connector {{ 'created' if ecr_connector_check.status == 404 else 'updated' }}: {{ connector_aws_ecr_id }}"

# ROSA Cluster Connector
- name: Get ROSA cluster API endpoint
  command: oc whoami --show-server
  register: rosa_api_endpoint
  changed_when: false

- name: Get service account token for ROSA
  shell: |
    oc get secret $(oc get sa {{ service_account_name }} -n {{ harness_delegate_namespace }} -o jsonpath='{.secrets[0].name}') \
      -n {{ harness_delegate_namespace }} -o jsonpath='{.data.token}' | base64 -d
  register: rosa_sa_token
  changed_when: false
  no_log: true

- name: Check if ROSA cluster connector exists
  uri:
    url: "{{ harness_api_base }}/ng/api/connectors/{{ connector_rosa_cluster_id }}"
    method: GET
    headers: "{{ harness_api_headers }}"
    status_code: [200, 404]
    validate_certs: yes
  register: rosa_connector_check
  failed_when: false

- name: Create/Update ROSA cluster connector
  uri:
    url: "{{ harness_api_base }}/ng/api/connectors{{ '' if rosa_connector_check.status == 404 else '/' + connector_rosa_cluster_id }}"
    method: "{{ 'POST' if rosa_connector_check.status == 404 else 'PUT' }}"
    headers: "{{ harness_api_headers }}"
    body_format: json
    body:
      connector:
        name: "{{ connector_rosa_cluster_name | default('rosa-cluster-connector') }}"
        identifier: "{{ connector_rosa_cluster_id }}"
        description: "ROSA OpenShift cluster connector"
        type: "K8sCluster"
        spec:
          credential:
            type: "ManualConfig"
            spec:
              masterUrl: "{{ rosa_api_endpoint.stdout }}"
              auth:
                type: "ServiceAccount"
                spec:
                  serviceAccountTokenRef: "{{ rosa_service_account_token_ref }}"
          delegateSelectors:
            - "{{ harness_delegate_name }}"
      accountIdentifier: "{{ harness_account_id }}"
      orgIdentifier: "{{ harness_org_id }}"
      projectIdentifier: "{{ harness_project_id }}"
    status_code: [200, 201]
  register: rosa_connector_result

- name: Display ROSA cluster connector result
  debug:
    msg: "ROSA cluster connector {{ 'created' if rosa_connector_check.status == 404 else 'updated' }}: {{ connector_rosa_cluster_id }}"

# Test all connectors
- name: Test GitHub connector
  uri:
    url: "{{ harness_api_base }}/ng/api/connectors/testConnection/{{ connector_github_id }}"
    method: POST
    headers: "{{ harness_api_headers }}"
    body_format: json
    body:
      accountIdentifier: "{{ harness_account_id }}"
      orgIdentifier: "{{ harness_org_id }}"
      projectIdentifier: "{{ harness_project_id }}"
    status_code: 200
    validate_certs: yes
  register: github_test
  ignore_errors: yes

- name: Test AWS ECR connector
  uri:
    url: "{{ harness_api_base }}/ng/api/connectors/testConnection/{{ connector_aws_ecr_id }}"
    method: POST
    headers: "{{ harness_api_headers }}"
    body_format: json
    body:
      accountIdentifier: "{{ harness_account_id }}"
      orgIdentifier: "{{ harness_org_id }}"
      projectIdentifier: "{{ harness_project_id }}"
    status_code: 200
    validate_certs: yes
  register: ecr_test
  ignore_errors: yes

- name: Test ROSA cluster connector
  uri:
    url: "{{ harness_api_base }}/ng/api/connectors/testConnection/{{ connector_rosa_cluster_id }}"
    method: POST
    headers: "{{ harness_api_headers }}"
    body_format: json
    body:
      accountIdentifier: "{{ harness_account_id }}"
      orgIdentifier: "{{ harness_org_id }}"
      projectIdentifier: "{{ harness_project_id }}"
    status_code: 200
    validate_certs: yes
  register: rosa_test
  ignore_errors: yes

# List all connectors
- name: List all connectors in project
  uri:
    url: "{{ harness_api_base }}/ng/api/connectors"
    method: GET
    headers: "{{ harness_api_headers }}"
    body_format: json
    body:
      accountIdentifier: "{{ harness_account_id }}"
      orgIdentifier: "{{ harness_org_id }}"
      projectIdentifier: "{{ harness_project_id }}"
    status_code: 200
    validate_certs: yes
  register: connector_list

- name: Display connector status summary
  debug:
    msg: |
      ========================================
      Connectors Setup Complete via API:
      ========================================

      GitHub Connector:
      - ID: {{ connector_github_id }}
      - Status: {{ 'Connected' if github_test.status == 200 else 'Connection Failed' }}
      - Test Result: {{ github_test.json.data.status | default('N/A') if github_test.status == 200 else github_test.msg | default('Failed') }}

      AWS ECR Connector:
      - ID: {{ connector_aws_ecr_id }}
      - Status: {{ 'Connected' if ecr_test.status == 200 else 'Connection Failed' }}
      - Registry: {{ ecr_registry }}
      - Test Result: {{ ecr_test.json.data.status | default('N/A') if ecr_test.status == 200 else ecr_test.msg | default('Failed') }}

      ROSA Cluster Connector:
      - ID: {{ connector_rosa_cluster_id }}
      - Status: {{ 'Connected' if rosa_test.status == 200 else 'Connection Failed' }}
      - Endpoint: {{ rosa_api_endpoint.stdout }}
      - Test Result: {{ rosa_test.json.data.status | default('N/A') if rosa_test.status == 200 else rosa_test.msg | default('Failed') }}

      Total Connectors in Project: {{ connector_list.json.data.totalItems | default(0) }}

- name: Clean up temp directory
  file:
    path: "/tmp/harness-connectors"
    state: absent
  when: not debug_mode | bool
