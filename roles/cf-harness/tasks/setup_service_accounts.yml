---
# Setup service accounts with IRSA for ECR access

- name: Create ECR service account in each namespace
  k8s:
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: "{{ harness_deployer_sa_name }}"
        namespace: "{{ item }}"
        annotations:
          eks.amazonaws.com/role-arn: "arn:aws:iam::{{ aws_account_id_target }}:role/{{ ecr_assume_role_name }}"
        labels:
          app: harness
          component: ecr-access
          environment: "{{ environment }}"
    state: present
  loop: "{{ harness_deployer_namespaces }}"

- name: Create Harness delegate service account
  k8s:
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: "{{ harness_delegate_sa_name }}"
        namespace: "{{ harness_delegate_namespace }}"
        annotations:
          eks.amazonaws.com/role-arn: "arn:aws:iam::{{ aws_account_id_target }}:role/HarnessDeployerRole"
        labels:
          app: harness-delegate
          environment: "{{ environment }}"
    state: present

- name: Create ClusterRole for ECR service account
  k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: "{{ harness_deployer_sa_name }}-role"
        labels:
          app: harness
          component: rbac
      rules:
        - apiGroups: [""]
          resources: 
            - secrets
            - configmaps
            - serviceaccounts
          verbs: 
            - get
            - list
            - create
            - update
            - patch
            - delete
        - apiGroups: ["apps"]
          resources: 
            - deployments
            - replicasets
            - statefulsets
            - daemonsets
          verbs: 
            - get
            - list
            - watch
        - apiGroups: [""]
          resources:
            - pods
            - pods/log
            - pods/exec
          verbs:
            - get
            - list
            - watch
    state: present

- name: Create ClusterRoleBinding for ECR service account in each namespace
  k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: "{{ harness_deployer_sa_name }}-{{ item }}-binding"
        labels:
          app: harness
          component: rbac
          namespace: "{{ item }}"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: "{{ harness_deployer_sa_name }}-role"
      subjects:
        - kind: ServiceAccount
          name: "{{ harness_deployer_sa_name }}"
          namespace: "{{ item }}"
    state: present
  loop: "{{ harness_deployer_namespaces }}"

- name: Create ClusterRole for Harness delegate
  k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: "{{ harness_delegate_sa_name }}-cluster-role"
        labels:
          app: harness-delegate
      rules:
        - apiGroups: ["*"]
          resources: ["*"]
          verbs: ["*"]
    state: present

- name: Create ClusterRoleBinding for Harness delegate
  k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: "{{ harness_delegate_sa_name }}-cluster-binding"
        labels:
          app: harness-delegate
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: "{{ harness_delegate_sa_name }}-cluster-role"
      subjects:
        - kind: ServiceAccount
          name: "{{ harness_delegate_sa_name }}"
          namespace: "{{ harness_delegate_namespace }}"
    state: present

- name: Create token secret for service accounts
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ item.sa }}-token"
        namespace: "{{ item.namespace }}"
        annotations:
          kubernetes.io/service-account.name: "{{ item.sa }}"
      type: kubernetes.io/service-account-token
    state: present
  loop:
    - { sa: "{{ harness_deployer_sa_name }}", namespace: "{{ harness_deployer_namespaces[0] }}" }
    - { sa: "{{ harness_deployer_sa_name }}", namespace: "{{ harness_deployer_namespaces[1] }}" }
    - { sa: "{{ harness_delegate_sa_name }}", namespace: "{{ harness_delegate_namespace }}" }

- name: Wait for token secrets to be populated
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ item.sa }}-token"
    namespace: "{{ item.namespace }}"
  register: token_secret
  until: token_secret.resources[0].data.token is defined
  retries: 10
  delay: 5
  loop:
    - { sa: "{{ harness_deployer_sa_name }}", namespace: "{{ harness_deployer_namespaces[0] }}" }
    - { sa: "{{ harness_delegate_sa_name }}", namespace: "{{ harness_delegate_namespace }}" }

- name: Extract service account tokens
  set_fact:
    ecr_sa_token: "{{ token_secret.results[0].resources[0].data.token | b64decode }}"
    delegate_sa_token: "{{ token_secret.results[1].resources[0].data.token | b64decode }}"
  no_log: true

- name: Create SCC binding for Harness delegate (OpenShift specific)
  command: |
    oc adm policy add-scc-to-user anyuid -z {{ harness_delegate_sa_name }} -n {{ harness_delegate_namespace }}
  register: scc_result
  ignore_errors: yes
  changed_when: "'added' in scc_result.stdout"

- name: Display service account setup summary
  debug:
    msg: |
      Service Accounts Created:
      - ECR SA: {{ harness_deployer_sa_name }} in namespaces {{ harness_deployer_namespaces | join(', ') }}
      - Delegate SA: {{ harness_delegate_sa_name }} in namespace {{ harness_delegate_namespace }}
      - IRSA Annotations: Applied for cross-account ECR access
      - RBAC: ClusterRoles and bindings created
      - Tokens: Generated and ready for use