---
# Apply Harness resources (services, pipelines, environments)

- name: Check if service definition exists
  stat:
    path: "/Users/swaroop/SIDKS/Deploy/harness/service.yaml"
  register: service_file

- name: Create temp directory for resources
  file:
    path: "/tmp/harness-resources"
    state: directory
    mode: '0755'

- name: Process service definition
  block:
    - name: Copy service definition
      copy:
        src: "/Users/swaroop/SIDKS/Deploy/harness/service.yaml"
        dest: "/tmp/harness-resources/service.yaml"
        mode: '0644'

    - name: Replace variables in service definition
      replace:
        path: "/tmp/harness-resources/service.yaml"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      loop:
        - { regexp: "<\\+variables\\.github\\.branch>", replace: "{{ github_branch }}" }
        - { regexp: "<\\+variables\\.application\\.helm_chart_version>", replace: "{{ helm_chart_version }}" }
        - { regexp: "<\\+variables\\.aws\\.ecr_registry>", replace: "{{ ecr_registry }}" }
        - { regexp: "<\\+variables\\.images\\.naming_server_tag>", replace: "{{ image_tags.naming_server }}" }
        - { regexp: "<\\+variables\\.images\\.api_gateway_tag>", replace: "{{ image_tags.api_gateway }}" }
        - { regexp: "<\\+variables\\.images\\.spring_boot_admin_tag>", replace: "{{ image_tags.spring_boot_admin }}" }
        - { regexp: "<\\+variables\\.images\\.config_service_tag>", replace: "{{ image_tags.config_service }}" }
        - { regexp: "<\\+variables\\.images\\.excel_service_tag>", replace: "{{ image_tags.excel_service }}" }
        - { regexp: "<\\+variables\\.images\\.bench_profile_tag>", replace: "{{ image_tags.bench_profile }}" }
        - { regexp: "<\\+variables\\.images\\.daily_submissions_tag>", replace: "{{ image_tags.daily_submissions }}" }
        - { regexp: "<\\+variables\\.images\\.interviews_tag>", replace: "{{ image_tags.interviews }}" }
        - { regexp: "<\\+variables\\.images\\.placements_tag>", replace: "{{ image_tags.placements }}" }
        - { regexp: "<\\+variables\\.images\\.frontend_tag>", replace: "{{ image_tags.frontend }}" }

    - name: Create service via Harness CLI
      shell: |
        harness service apply \
          --file /tmp/harness-resources/service.yaml \
          --account-id {{ harness_account_id }} \
          --org-id {{ harness_org_id }} \
          --project-id {{ harness_project_id }}
      register: service_result
      ignore_errors: yes

    - name: Update service if exists
      shell: |
        # Skipping update - apply handles both
        echo "Service already exists, using apply" || true
        # harness service apply \
          --file /tmp/harness-resources/service.yaml \
          --account-id {{ harness_account_id }} \
          --org-id {{ harness_org_id }} \
          --project-id {{ harness_project_id }}
      when: service_result.rc != 0 and "already exists" in service_result.stderr
  when: service_file.stat.exists

# Create environments
- name: Create environment configurations
  template:
    src: environment.yaml.j2
    dest: "/tmp/harness-resources/environment-{{ item }}.yaml"
    mode: '0644'
  loop: "{{ environments_list }}"

- name: Create environments via Harness CLI
  shell: |
    harness environment apply \
      --file /tmp/harness-resources/environment-{{ item }}.yaml \
      --account-id {{ harness_account_id }} \
      --org-id {{ harness_org_id }} \
      --project-id {{ harness_project_id }}
  loop: "{{ environments_list }}"
  register: env_results
  ignore_errors: yes

# Create infrastructure definitions
- name: Create infrastructure definition for each environment
  template:
    src: infrastructure.yaml.j2
    dest: "/tmp/harness-resources/infrastructure-{{ item }}.yaml"
    mode: '0644'
  loop: "{{ environments_list }}"

- name: Apply infrastructure definitions
  shell: |
    harness infrastructure apply \
      --file /tmp/harness-resources/infrastructure-{{ item }}.yaml \
      --account-id {{ harness_account_id }} \
      --org-id {{ harness_org_id }} \
      --project-id {{ harness_project_id }} \
      --env-id {{ item }}
  loop: "{{ environments_list }}"
  register: infra_results
  ignore_errors: yes

# Create pipeline if enabled
- name: Create pipeline configuration
  template:
    src: pipeline.yaml.j2
    dest: "/tmp/harness-resources/pipeline.yaml"
    mode: '0644'
  when: enable_pipeline_creation | bool

- name: Create pipeline via Harness CLI
  shell: |
    harness pipeline apply \
      --file /tmp/harness-resources/pipeline.yaml \
      --account-id {{ harness_account_id }} \
      --org-id {{ harness_org_id }} \
      --project-id {{ harness_project_id }}
  register: pipeline_result
  ignore_errors: yes
  when: enable_pipeline_creation | bool

# List all resources
- name: List services (CLI doesn't support list)
  shell: |
    # Note: harness CLI doesn't have a list command for services
    echo "Service list not available in CLI version {{ harness_cli_version | default('v0.0.29') }}"
    echo "Created service: cf-microservices"
  register: services_list
  changed_when: false

- name: List environments (CLI doesn't support list)
  shell: |
    # Note: harness CLI doesn't have a list command for environments
    echo "Environment list not available in CLI version {{ harness_cli_version | default('v0.0.29') }}"
    echo "Created environments: {{ environments_list | join(', ') }}"
  register: environments_list_output
  changed_when: false

- name: List pipelines (CLI doesn't support list)
  shell: |
    # Note: harness CLI doesn't have a list command for pipelines
    echo "Pipeline list not available in CLI version {{ harness_cli_version | default('v0.0.29') }}"
    echo "Created pipeline: cf-deployment-pipeline"
  register: pipelines_list
  changed_when: false
  when: enable_pipeline_creation | bool

- name: Display resources summary
  debug:
    msg: |
      Harness Resources Created:

      Services:
      {{ services_list.stdout }}

      Environments:
      {{ environments_list_output.stdout }}

      {% if enable_pipeline_creation %}
      Pipelines:
      {{ pipelines_list.stdout }}
      {% endif %}

      Next Steps:
      1. Log into Harness UI: {{ harness_platform_url }}
      2. Navigate to your project: {{ harness_project_id }}
      3. Verify all resources are created
      4. Configure any additional settings in the UI
      5. Execute pipeline for deployment

- name: Clean up temp directory
  file:
    path: "/tmp/harness-resources"
    state: absent
  when: not debug_mode | bool
