---
# CF-DB Role Main Orchestration - Consolidated & Minimized
# Creates Aurora PostgreSQL infrastructure with proper dependencies and tag-based idempotency
# All resources tagged with 'Component=cf-db' for consistent management

- name: Load environment-specific configuration
  include_vars: "../../environments/{{ target_environment }}/cf-db.yml"
  tags:
    - always
    - cf-db

- name: Validate required variables
  assert:
    that:
      - cf_db_config.region is defined
      - cf_db_config.vpc_cidr is defined
      - cf_db_config.database.cluster_name is defined
      - target_environment is defined
      - aws_profile is defined and aws_profile != ""
    fail_msg: "Required variables are missing. Provide: target_environment and aws_profile"
    success_msg: "Configuration validated for {{ target_environment }} environment with AWS profile {{ aws_profile }}"
  tags:
    - cf-db
    - validation

- name: Display CF-DB role execution summary
  debug:
    msg:
      - "=== CF-DB Role Execution Started ==="
      - "Environment: {{ cf_db_config.common_tags.Environment }}"
      - "AWS Profile: {{ aws_profile }}"
      - "Region: {{ cf_db_config.region }}"
      - "VPC CIDR: {{ cf_db_config.vpc_cidr }}"
      - "Aurora Cluster: {{ cf_db_config.database.cluster_name }}"
      - "Engine: {{ cf_db_config.database.engine }} {{ cf_db_config.database.engine_version }}"
      - "Cross-VPC Access: {{ 'Enabled (VPC Peering)' if cf_db_config.vpc_peering.enabled | default(false) else 'Security Groups Only' }}"
      - "Tag-based Idempotency: Component=cf-db"
      - "===================================="
  tags:
    - cf-db

# ===== CONSOLIDATED NETWORKING (All networking in one task) =====
- name: Setup consolidated networking infrastructure
  include_tasks: networking.yml
  tags:
    - cf-db
    - networking
    - vpc
    - subnets
    - nat-gateway
    - vpc-peering

# ===== CONSOLIDATED SECURITY (Security groups and DB subnet group) =====
- name: Setup security groups and DB subnet group
  include_tasks: security.yml
  tags:
    - cf-db
    - security
    - security-groups
    - db-subnet-group

# ===== AURORA CLUSTER (Complete Aurora setup) =====
- name: Deploy Aurora PostgreSQL cluster
  include_tasks: aurora_cluster.yml
  tags:
    - cf-db
    - aurora
    - database
    - db-cluster

# ===== CLEANUP TASKS (Separate execution only) =====
- name: Cleanup Aurora DB and network resources
  include_tasks: db_cleanup.yml
  when: cf_db_cleanup is defined and cf_db_cleanup | bool
  tags:
    - cleanup
    - db-cleanup

# ===== FINAL DEPLOYMENT SUMMARY =====
- name: Display final CF-DB deployment summary
  debug:
    msg:
      - "=== CF-DB Role Deployment Complete ==="
      - "‚úÖ Networking: VPC, Subnets, NAT Gateway, Routes"
      - "{% if cf_db_config.vpc_peering.enabled | default(false) %}‚úÖ VPC Peering: Cross-region connectivity established{% endif %}"
      - "‚úÖ Security: Security Groups, DB Subnet Group"
      - "‚úÖ Aurora: PostgreSQL cluster with {{ cf_db_config.database.instances | length }} instances"
      - "‚úÖ Multi-AZ: {{ cf_db_config.availability_zones | length }} availability zones"
      - "‚úÖ Encryption: Storage encrypted, deletion protection {{ 'enabled' if cf_db_config.database.deletion_protection else 'disabled' }}"
      - ""
      - "üîß Infrastructure Details:"
      - "   VPC ID: {{ cf_db_vpc_id | default('N/A') }}"
      - "   Cluster Endpoint: {{ cf_db_cluster_endpoint | default('N/A') }}"
      - "   Database: {{ cf_db_config.database.database_name }}"
      - "   Port: {{ cf_db_config.security_group.db_port }}"
      - ""
      - "üìã Next Steps:"
      - "   1. Test connectivity from ROSA cluster"
      - "   2. Create OpenShift database secrets"
      - "   3. Configure application connection strings" 
      - "   4. Set up database monitoring (optional)"
      - ""
      - "üè∑Ô∏è  All resources tagged with Component=cf-db"
      - "======================================="
  tags:
    - cf-db

# ===== USAGE EXAMPLES =====
# Full role execution:
#   ansible-playbook playbooks/main.yml --tags cf-db -e "target_environment=dev" -e "aws_profile=sid-KS"
#
# Individual task execution:
#   ansible-playbook playbooks/main.yml --tags networking -e "target_environment=dev" -e "aws_profile=sid-KS"
#   ansible-playbook playbooks/main.yml --tags security -e "target_environment=dev" -e "aws_profile=sid-KS"
#   ansible-playbook playbooks/main.yml --tags aurora -e "target_environment=dev" -e "aws_profile=sid-KS"
#
# Cleanup:
#   ansible-playbook playbooks/main.yml --tags cleanup -e "target_environment=dev" -e "aws_profile=sid-KS" -e "cf_db_cleanup=true"
#
# Environment-specific with different profiles:
#   ansible-playbook playbooks/main.yml --tags cf-db -e "target_environment=dev" -e "aws_profile=sid-KS"
#   ansible-playbook playbooks/main.yml --tags cf-db -e "target_environment=test" -e "aws_profile=sid-KS-test"
#   ansible-playbook playbooks/main.yml --tags cf-db -e "target_environment=prod" -e "aws_profile=sid-KS-prod"
#
# Using default AWS profile:
#   ansible-playbook playbooks/main.yml --tags cf-db -e "target_environment=dev" -e "aws_profile=default"