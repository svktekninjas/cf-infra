---
# CF-DB Role VPC Creation Tasks with Idempotency
# Creates new VPC with 172.31.0.0/16 CIDR to avoid ROSA cluster conflicts
# This task is executed when vpc_id is empty in configuration
# Includes existence checks to make the task idempotent

- name: Check if VPC already exists
  shell: |
    aws ec2 describe-vpcs \
      --region {{ cf_db_config.region }} \
      --filters "Name=cidr-block,Values={{ cf_db_config.vpc_cidr }}" "Name=tag:Environment,Values={{ cf_db_config.common_tags.Environment }}" "Name=state,Values=available" \
      --query 'Vpcs[0].VpcId' \
      --output text
  environment:
    AWS_PROFILE: "{{ cf_db_config.profile }}"
  register: existing_vpc_check
  failed_when: false
  tags:
    - cf-db
    - create-vpc
    - networking

- name: Display VPC creation summary
  debug:
    msg:
      - "=== VPC Creation Phase ==="
      - "VPC Status: {{ 'Using existing' if existing_vpc_check.stdout != 'None' else 'Creating new' }}"
      - "VPC ID: {{ existing_vpc_check.stdout if existing_vpc_check.stdout != 'None' else 'To be created' }}"
      - "VPC CIDR: {{ cf_db_config.vpc_cidr }}"
      - "Public Subnet CIDR: {{ cf_db_config.public_subnet_cidr }}"
      - "Region: {{ cf_db_config.region }}"
      - "============================"

- name: Create Aurora VPC with new CIDR range
  shell: |
    aws ec2 create-vpc \
      --region {{ cf_db_config.region }} \
      --cidr-block {{ cf_db_config.vpc_cidr }} \
      --tag-specifications 'ResourceType=vpc,Tags=[{Key=Name,Value=cf-aurora-vpc-{{ cf_db_config.common_tags.Environment }}},{Key=Environment,Value={{ cf_db_config.common_tags.Environment }}},{Key=Project,Value={{ cf_db_config.common_tags.Project }}},{Key=Component,Value={{ cf_db_config.common_tags.Component }}},{Key=ManagedBy,Value={{ cf_db_config.common_tags.ManagedBy }}}]' \
      --query 'Vpc.VpcId' \
      --output text
  register: new_vpc_creation
  when: existing_vpc_check.stdout == "None"
  environment:
    AWS_PROFILE: "{{ cf_db_config.profile }}"
  tags:
    - cf-db
    - create-vpc
    - networking

- name: Set VPC ID fact from existing or new VPC
  set_fact:
    cf_db_created_vpc_id: "{{ existing_vpc_check.stdout if existing_vpc_check.stdout != 'None' else new_vpc_creation.stdout }}"
  tags:
    - cf-db
    - create-vpc
    - networking

- name: Skip remaining VPC setup tasks if using existing VPC
  debug:
    msg:
      - "ðŸ”„ Using existing VPC: {{ cf_db_created_vpc_id }}"
      - "âš¡ Skipping VPC infrastructure setup (DNS, IGW, subnets)"
      - "âœ… VPC is ready for Aurora deployment"
  when: existing_vpc_check.stdout != "None"
  tags:
    - cf-db
    - create-vpc
    - networking

- name: Continue with new VPC setup
  debug:
    msg:
      - "ðŸ†• Created new VPC: {{ cf_db_created_vpc_id }}"
      - "ðŸ”§ Continuing with DNS settings and infrastructure setup"
  when: existing_vpc_check.stdout == "None"
  tags:
    - cf-db
    - create-vpc
    - networking

- name: Enable DNS hostnames for new VPC
  shell: |
    aws ec2 modify-vpc-attribute \
      --region {{ cf_db_config.region }} \
      --vpc-id {{ cf_db_created_vpc_id }} \
      --enable-dns-hostnames
  when: existing_vpc_check.stdout == "None"
  environment:
    AWS_PROFILE: "{{ cf_db_config.profile }}"
  tags:
    - cf-db
    - create-vpc
    - networking

- name: Enable DNS support for new VPC
  shell: |
    aws ec2 modify-vpc-attribute \
      --region {{ cf_db_config.region }} \
      --vpc-id {{ cf_db_created_vpc_id }} \
      --enable-dns-support
  when: existing_vpc_check.stdout == "None"
  environment:
    AWS_PROFILE: "{{ cf_db_config.profile }}"
  tags:
    - cf-db
    - create-vpc
    - networking

- name: Check if public subnet already exists
  shell: |
    aws ec2 describe-subnets \
      --region {{ cf_db_config.region }} \
      --filters "Name=vpc-id,Values={{ cf_db_created_vpc_id }}" "Name=cidr-block,Values={{ cf_db_config.public_subnet_cidr }}" "Name=state,Values=available" \
      --query 'Subnets[0].SubnetId' \
      --output text
  environment:
    AWS_PROFILE: "{{ cf_db_config.profile }}"
  register: existing_public_subnet_check
  failed_when: false
  tags:
    - cf-db
    - create-vpc
    - networking

- name: Create public subnet for NAT Gateway
  shell: |
    aws ec2 create-subnet \
      --region {{ cf_db_config.region }} \
      --vpc-id {{ cf_db_created_vpc_id }} \
      --cidr-block {{ cf_db_config.public_subnet_cidr }} \
      --availability-zone {{ cf_db_config.availability_zones[0] }} \
      --tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=cf-public-subnet-{{ cf_db_config.common_tags.Environment }}},{Key=Environment,Value={{ cf_db_config.common_tags.Environment }}},{Key=Project,Value={{ cf_db_config.common_tags.Project }}},{Key=Component,Value={{ cf_db_config.common_tags.Component }}},{Key=ManagedBy,Value={{ cf_db_config.common_tags.ManagedBy }}},{Key=Type,Value=Public}]' \
      --query 'Subnet.SubnetId' \
      --output text
  register: new_public_subnet_creation
  when: existing_public_subnet_check.stdout == "None"
  environment:
    AWS_PROFILE: "{{ cf_db_config.profile }}"
  tags:
    - cf-db
    - create-vpc
    - networking

- name: Set public subnet ID fact
  set_fact:
    cf_db_created_public_subnet_id: "{{ existing_public_subnet_check.stdout if existing_public_subnet_check.stdout != 'None' else new_public_subnet_creation.stdout | default('') }}"
  tags:
    - cf-db
    - create-vpc
    - networking

- name: Check if Internet Gateway already exists
  shell: |
    aws ec2 describe-internet-gateways \
      --region {{ cf_db_config.region }} \
      --filters "Name=attachment.vpc-id,Values={{ cf_db_created_vpc_id }}" \
      --query 'InternetGateways[0].InternetGatewayId' \
      --output text
  environment:
    AWS_PROFILE: "{{ cf_db_config.profile }}"
  register: existing_igw_check
  failed_when: false
  tags:
    - cf-db
    - create-vpc
    - networking

- name: Create Internet Gateway
  shell: |
    aws ec2 create-internet-gateway \
      --region {{ cf_db_config.region }} \
      --tag-specifications 'ResourceType=internet-gateway,Tags=[{Key=Name,Value=cf-igw-{{ cf_db_config.common_tags.Environment }}},{Key=Environment,Value={{ cf_db_config.common_tags.Environment }}},{Key=Project,Value={{ cf_db_config.common_tags.Project }}},{Key=Component,Value={{ cf_db_config.common_tags.Component }}},{Key=ManagedBy,Value={{ cf_db_config.common_tags.ManagedBy }}}]' \
      --query 'InternetGateway.InternetGatewayId' \
      --output text
  register: new_igw_creation
  when: existing_igw_check.stdout == "None"
  environment:
    AWS_PROFILE: "{{ cf_db_config.profile }}"
  tags:
    - cf-db
    - create-vpc
    - networking

- name: Attach Internet Gateway to VPC
  shell: |
    aws ec2 attach-internet-gateway \
      --region {{ cf_db_config.region }} \
      --vpc-id {{ cf_db_created_vpc_id }} \
      --internet-gateway-id {{ new_igw_creation.stdout }}
  when: 
    - existing_igw_check.stdout == "None"
    - new_igw_creation.stdout is defined
  environment:
    AWS_PROFILE: "{{ cf_db_config.profile }}"
  tags:
    - cf-db
    - create-vpc
    - networking

- name: Get main route table ID
  shell: |
    aws ec2 describe-route-tables \
      --region {{ cf_db_config.region }} \
      --filters "Name=vpc-id,Values={{ cf_db_created_vpc_id }}" "Name=association.main,Values=true" \
      --query 'RouteTables[0].RouteTableId' \
      --output text
  environment:
    AWS_PROFILE: "{{ cf_db_config.profile }}"
  register: main_route_table_result
  tags:
    - cf-db
    - create-vpc
    - networking

- name: Set Internet Gateway ID fact
  set_fact:
    cf_db_igw_id: "{{ existing_igw_check.stdout if existing_igw_check.stdout != 'None' else (new_igw_creation.stdout if new_igw_creation is defined else '') }}"

- name: Add route to Internet Gateway in main route table
  shell: |
    aws ec2 create-route \
      --region {{ cf_db_config.region }} \
      --route-table-id {{ main_route_table_result.stdout }} \
      --destination-cidr-block 0.0.0.0/0 \
      --gateway-id {{ cf_db_igw_id }}
  when: 
    - main_route_table_result.stdout is defined
    - cf_db_igw_id is defined and cf_db_igw_id != ""
  failed_when: false  # Route might already exist
  environment:
    AWS_PROFILE: "{{ cf_db_config.profile }}"
  tags:
    - cf-db
    - create-vpc
    - networking

- name: Display VPC creation completion summary
  debug:
    msg:
      - "=== VPC Creation Completed ==="
      - "âœ… VPC ID: {{ cf_db_created_vpc_id }}"
      - "âœ… VPC CIDR: {{ cf_db_config.vpc_cidr }}"
      - "âœ… Public Subnet ID: {{ cf_db_created_public_subnet_id }}"
      - "âœ… Public Subnet CIDR: {{ cf_db_config.public_subnet_cidr }}"
      - "âœ… Internet Gateway: {{ existing_igw_check.stdout if existing_igw_check.stdout != 'None' else new_igw_creation.stdout | default('inherited') }}"
      - "âœ… Main Route Table: {{ main_route_table_result.stdout }}"
      - ""
      - "The VPC is ready for Aurora deployment!"
      - "No CIDR conflicts with ROSA cluster (10.0.0.0/16)"
      - "=============================="
  tags:
    - cf-db
    - create-vpc
    - networking