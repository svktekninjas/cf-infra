---
# Pre-commit hooks for Ansible code quality
# Install: pip install pre-commit
# Setup: pre-commit install
# Run manually: pre-commit run --all-files

default_language_version:
  python: python3.11

repos:
  # General file fixes
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--unsafe]  # Allow custom tags
      - id: check-json
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: detect-private-key
      - id: mixed-line-ending
        args: [--fix=lf]
      - id: pretty-format-json
        args: [--autofix, --indent=2]

  # YAML Linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.33.0
    hooks:
      - id: yamllint
        args: [-c=.yamllint]
        files: \.(yaml|yml)$
        exclude: |
          (?x)^(
            .github/workflows/.*|
            molecule/.*
          )$

  # Ansible Linting
  - repo: https://github.com/ansible/ansible-lint
    rev: v6.22.0
    hooks:
      - id: ansible-lint
        files: \.(yaml|yml)$
        exclude: |
          (?x)^(
            .github/.*|
            molecule/.*|
            .pre-commit-config.yaml
          )$
        additional_dependencies:
          - ansible>=2.15.0
          - jmespath
          - netaddr
        args: [--force-color, --parseable-severity]

  # Jinja2 Template Linting
  - repo: https://github.com/motet-a/jinjalint
    rev: 0.5
    hooks:
      - id: jinjalint
        files: \.(j2|jinja|jinja2)$

  # Shell Script Linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        files: \.(sh|bash)$
        args: [--severity=warning]

  # Python Code Quality (for any Python scripts)
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3.11
        files: \.py$

  - repo: https://github.com/PyCQA/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=120, --ignore=E203, W503]
        files: \.py$

  # Security Checks
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: |
          (?x)^(
            .*\.lock$|
            package-lock\.json$|
            .*\.example$|
            .*\.template$
          )$

  # Markdown Linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.38.0
    hooks:
      - id: markdownlint
        args: [--fix]
        files: \.md$

  # Dockerfile Linting (if any)
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        files: Dockerfile.*

  # Custom Ansible Variable Validation
  - repo: local
    hooks:
      - id: check-ansible-vault
        name: Check for unencrypted vault files
        entry: |
          bash -c 'for f in $(find . -name "vault*.yml" -o -name "*vault.yml"); do
            if ! head -1 "$f" | grep -q "ANSIBLE_VAULT"; then
              echo "Unencrypted vault file: $f"; exit 1
            fi
          done'
        language: system
        pass_filenames: false

      - id: check-reserved-vars
        name: Check for reserved variable names
        entry: |
          bash -c 'if grep -r "^\s*environment:" --include="*.yml" \
            roles/ playbooks/ 2>/dev/null | grep -v "#"; then \
            echo "Found reserved variable name: environment"; exit 1; fi'
        language: system
        pass_filenames: false

      - id: validate-inventory
        name: Validate inventory structure
        entry: bash -c 'if [ -f ansible/inventory ]; then ansible-inventory -i ansible/inventory --list > /dev/null || exit 1; fi'
        language: system
        pass_filenames: false

      - id: check-hardcoded-secrets
        name: Check for hardcoded secrets
        entry: bash -c 'if grep -rE "(api_key|password|token|secret):\s*['\''\"]\w+['\''\""]" --include="*.yml" --include="*.yaml" roles/ playbooks/ 2>/dev/null | grep -v -E "(vault_|lookup|env|prompt)"; then echo "Found potential hardcoded secrets"; exit 1; fi'
        language: system
        pass_filenames: false

# Configuration for specific hooks
files: |
  (?x)^(
    .*\.(yml|yaml|j2|jinja2|sh|bash|py|json|md)|
    Dockerfile.*|
    Makefile
  )$

exclude: |
  (?x)^(
    .cache/.*|
    .git/.*|
    .idea/.*|
    .vscode/.*|
    __pycache__/.*|
    .*\.egg-info/.*|
    venv/.*|
    env/.*|
    build/.*|
    dist/.*
  )$
